// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin", "windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Option {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  description           String
  price                 Int
  menuId                String @db.ObjectId
  menu                  Menu  @relation(fields: [menuId], references: [id])
  foodOrderIds           String[] @db.ObjectId
  foodOrder             FoodOrder[] @relation(fields: [foodOrderIds], references: [id])
}
model Menu {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  foodName              String   
  category              String
  description           String?   
  imageUrl              String?
  price                 Int
  menuStatus           menu_status   @default(NORMAL)
  options               Option[]
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @default(now())
  foodOrder             FoodOrder[]
  restaurant            Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId          String  @db.ObjectId
  @@unique([restaurantId,foodName])
  @@unique([restaurantId, id])
}

model Restaurant {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  restaurantName        String   @unique
  restaurantImage       String[]
  menu                  Menu[]   
  location              String
  registerOn            DateTime      @default(now())
  isActivate            Boolean  @default(true)
  status                restaurant_status  @default(OPEN)
  bankAccounts           BankAccount[]
  table                 Table[]
  admin                 Admin[] @relation("AdminRestaurant")
  updatedAt             DateTime  @default(now())
  order                 Order[]   
}

model BankAccount {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  bankName              String
  imageUrl              String?
  accountNumber         String
  restaurantId          String
  restaurant            Restaurant      @relation(fields: [restaurantId], references: [id])
}

model Table {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  tableToken            String   @unique
  tableName             String  
  qrcodeImageUrl        String
  isActivate            Boolean  @default(true)
  restaurant            Restaurant   @relation(fields: [restaurantId], references: [id])
  restaurantId          String   @db.ObjectId
  order                 Order[]       
  clientGroup           ClientGroup[]
  @@unique([tableName,restaurantId])
  @@unique([id, restaurantId])
}

model Admin {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  firstname             String
  lastname              String
  email                 String   @unique
  password              String
  roleId                String    
  role                  Role      @relation(fields: [roleId], references: [id])
  restaurant            Restaurant   @relation("AdminRestaurant" ,fields: [restaurantId], references: [id])
  restaurantId          String   @db.ObjectId
}

model Role {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  key                   String
  name                  String
  admin                 Admin[]
  permissionId          String[]  @db.ObjectId
  permission            Permission[] @relation(fields: [permissionId], references: [id])
}

model Permission {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  key                   String
  name                  String
  description           String
  roleId                String[] @db.ObjectId
  role                  Role[] @relation(fields: [roleId], references: [id])
}

model Order {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  foodOrderList         FoodOrder[] 
  createAt              DateTime  @default(now())
  updatedAt             DateTime  @default(now())
  status                order_status  @default(NOT_CHECKOUT)
  clientState           order_client_state @default(PENDING)
  overallFoodStatus     order_overall_food_status @default(PENDING)
  table                 Table     @relation(fields: [tableId], references: [id])
  tableId               String    @db.ObjectId
  restaurant            Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId          String    @db.ObjectId
  clientGroup           ClientGroup  @relation(fields: [clientGroupId], references: [id])
  clientGroupId         String    @unique @db.ObjectId
  bill                  Bill?      
}

model ClientGroup {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  table                 Table    @relation(fields: [tableId], references: [id])
  tableId               String   @db.ObjectId
  order                 Order?   
  createdAt             DateTime @default(now())
  client                Client[]
  selectedFoodList      Json[]
  status                client_group_status @default(IN_PROGRESS)
}

model Client {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  username              String
  status                client_status     @default(ONLINE)
  clientGroupId         String    @unique @db.ObjectId
  clientGroup           ClientGroup  @relation(fields: [clientGroupId], references: [id])
  createdAt             DateTime @default(now())
  foodOrderId           String[]    @unique @db.ObjectId
  foodOrder             FoodOrder[]    @relation(fields: [foodOrderId], references: [id])
}

model FoodOrder {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  note                  String?
  orderId               String   @db.ObjectId
  order                 Order    @relation(fields: [orderId], references: [id])
  menuId                String   @db.ObjectId
  menu                  Menu     @relation(fields: [menuId], references: [id])
  optionIds              String[]   @db.ObjectId
  options               Option[]  @relation(fields: [optionIds], references: [id])
  clientId              String[]    @db.ObjectId
  client               Client[]  @relation(fields: [clientId], references: [id])
  status                food_order_status @default(PENDING)
}

model Bill {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime @default(now())
  orderId               String @unique
  order                 Order @relation(fields: [orderId], references: [id])
  status                bill_status   @default(NOT_PAID)
  totalPrice            Int
}

enum client_status {
  ONLINE
  OFFLINE
}

enum client_group_status {
  IN_PROGRESS
  COMPLETED
}

enum menu_status {
  NORMAL
  CANCEL
}

enum restaurant_status {
  OPEN
  CLOSE
}

enum order_status {
  BILLING
  PAID
  NOT_CHECKOUT
  CANCEL
}

enum order_client_state {
  PENDING
  CONFIRMED
  REJECT
  UPDATE_FOOD
  BILLING
  // ORDER_MORE_FOOD
  // CANCEL_SOME_FOOD
  // ORDER_AND_CANCEL_FOOD
}

enum food_order_status {
  COOKING
  SERVED
  CANCEL
  PENDING
}

enum order_overall_food_status {
  ALL_SERVED
  PENDING
}

enum bill_status {
  PAID
  NOT_PAID
  CANCEL
}